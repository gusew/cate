CC 			= g++

# Option explanation:
# -Wall -Wextra -Werror -pedantic  => be strict, force clean and robust code
# -std=c++11  => rely on language features from c++11
# -fPIC  => produce position-independent code, enable use of shared objects
# -fmax-error=3  => stop after 3 errors were detected
# -Wl,--export-dynamic  => add all symbols to dynamic symbol table, needed to access from dlopened-algorithm-library to global variables (memRegistryPtr)
# -D MEMTRACE_DISABLED => memtrace functionality will be disabled, for solid chronograph-results
MEMDISABLE	= -D MEMTRACE_DISABLED
CFLAGS 		= -O3 -Wall -Wextra -Werror -pedantic -std=c++11 -fPIC -fmax-errors=3 -Wl,--export-dynamic #$(MEMDISABLE)

# -shared => produce a shared object, which can be linked to other objects
CSOFLAGS	= -shared

APPNAME		= cate
BUILD		= ./build/
SRCDIR		= ./src/
INCLUDE		= ./include
EXPORT		= ./exec/

# group some object files
OBJ_MEM		= $(BUILD)MemTrace.o \
	$(BUILD)MemTraceData.o \
	$(BUILD)MemManager.o \
	$(BUILD)Registry.o \
	$(BUILD)MemTraceRegistry.o \
	$(BUILD)MemSnapshot.o \

OBJ_CHRONO	= $(BUILD)ChronoManager.o \
	$(BUILD)Chronograph.o

OBJ_DATA	= $(BUILD)VarValue.o \
	$(BUILD)RuleSet.o \
	$(BUILD)RuleAtom.o \
	$(BUILD)Benchmark.o \
	$(BUILD)Configuration.o \
	$(BUILD)Statistics.o \
	$(BUILD)Results.o

OBJ_RNDGEN	= $(BUILD)RandomNumberGenerator.o \
	$(BUILD)HeaderGenerator.o \
	$(BUILD)RandomHeaderConfiguration.o

# all object files for main-program
OBJFILES	= $(OBJ_MEM) $(OBJ_CHRONO) $(OBJ_DATA) $(OBJ_RNDGEN) \
	$(BUILD)main.o \
	$(BUILD)AlgFactory.o \
	$(BUILD)LuaInterpreter.o \
	$(BUILD)LuaConfigurator.o \
	$(BUILD)Shell.o \
	$(BUILD)Web.o \
	$(BUILD)FilesysHelper.o \
	$(BUILD)BenchmarkExecutor.o \
	$(BUILD)OutputResults.o \
	$(BUILD)Evaluator.o

CP_LUA		= $(SRCDIR)lua/preprocess.lua \
	$(SRCDIR)lua/postprocess.lua \
	$(SRCDIR)lua/config.lua 

CP_HTML		= $(SRCDIR)html/jqplot.js \
	$(SRCDIR)html/jqplot.css

UNITTFLAGS	= -g -O0 -Wall -Werror -pedantic -std=c++11 -fPIC -fmax-errors=3 -pthread -fmessage-length=0 -D_GLIBCXX_USE_NANOSLEEP
UNITTLIBDIR	= ./libunittest/
UNITTLIB 	= $(UNITTLIBDIR)lib/libunittest.so
UNITTDIR	= ./test/

# listing of all available tests
UNITTSET1	= $(OBJ_DATA) \
	$(BUILD)test/RuleSet.o 

UNITTSET2	= $(OBJ_DATA) \
	$(BUILD)test/VarValue.o 

UNITTSET3	= $(OBJ_MEM) \
	$(BUILD)Data5tpl.o \
	$(BUILD)test/AlgTestFixtures.o \
	$(BUILD)test/AlgData5tpl.o

UNITTSET4	= $(OBJ_MEM) \
	$(BUILD)test/MemSnapshot.o \
	$(BUILD)test/MemManager.o \
	$(BUILD)test/MemTrace.o 

UNITTSET5	= $(OBJ_CHRONO) \
	$(BUILD)test/ChronoManager.o

UNITTSET6	= $(BUILD)FilesysHelper.o \
	$(BUILD)test/FilesysHelper.o

UNITTSET7	= $(OBJ_DATA) \
	$(BUILD)LuaConfigurator.o \
	$(BUILD)test/LuaConfigurator.o

UNITTSET8	= $(OBJ_RNDGEN) \
	$(BUILD)test/HeaderGenerator.o \
	$(BUILD)test/RandomNumberGenerator.o 

UNITTSET9	= $(OBJ_DATA) \
	$(BUILD)Statistics.o \
	$(BUILD)test/Statistics.o

# listing of all unit tests for algorithms
UNITTALG1	= $(OBJ_MEM) $(OBJ_CHRONO) $(OBJ_DATA) \
	$(BUILD)Base.o \
	$(BUILD)Data5tpl.o \
	$(BUILD)Converter5tpl.o \
	$(BUILD)LinearSearch5tpl.o \
	$(BUILD)test/AlgTestFixtures.o \
	$(BUILD)test/AlgLinearSearch5tpl.o

UNITTALG2	= $(OBJ_MEM) $(OBJ_CHRONO) $(OBJ_DATA) \
	$(BUILD)Base.o \
	$(BUILD)Data5tpl.o \
	$(BUILD)Converter5tpl.o \
	$(BUILD)DataBitvector.o \
	$(BUILD)Bitvector5tpl.o \
	$(BUILD)test/AlgTestFixtures.o \
	$(BUILD)test/AlgDataBitvector.o \
	$(BUILD)test/AlgBitvector5tpl.o

UNITTALG3	= $(OBJ_MEM) $(OBJ_CHRONO) $(OBJ_DATA) \
	$(BUILD)Base.o \
	$(BUILD)Data5tpl.o \
	$(BUILD)Converter5tpl.o \
	$(BUILD)DataHiCuts.o \
	$(BUILD)DataHiCuts5tpl.o \
	$(BUILD)HiCuts5tpl.o \
	$(BUILD)test/AlgTestFixtures.o \
	$(BUILD)test/AlgDataHiCuts5tpl.o \
	$(BUILD)test/AlgHiCuts5tpl.o

UNITTALG4	= $(OBJ_MEM) $(OBJ_CHRONO) $(OBJ_DATA) \
	$(BUILD)Base.o \
	$(BUILD)Data5tpl.o \
	$(BUILD)Converter5tpl.o \
	$(BUILD)TupleSpace5tpl.o \
	$(BUILD)test/AlgTestFixtures.o \
	$(BUILD)test/AlgTupleSpace5tpl.o


# all object files for unit tests (algorithms excluded)
UNITTOBJS	= $(sort  $(UNITTSET1) $(UNITTSET2) $(UNITTSET3) $(UNITTSET4) $(UNITTSET5) $(UNITTSET6) $(UNITTSET7) $(UNITTSET8) $(UNITTSET9))

LUALIBDIR	= ./liblua/
LUALIB		= $(LUALIBDIR)liblua.a

GMPLIBDIR	= ./libgmp/
GMPLIB		= $(GMPLIBDIR)build/lib/libgmp.a
GMPLIBXX	= $(GMPLIBDIR)build/lib/libgmpxx.a 

VALFLAGS	= --tool=memcheck --leak-check=yes

# all files for export complete program
EXECFILES	= $(BUILD)$(APPNAME) \
	$(BUILD)*.so \
	$(BUILD)config.lua \
	$(BUILD)preprocess.lua \
	$(BUILD)postprocess.lua \
	$(BUILD)jqplot.css \
	$(BUILD)jqplot.js

